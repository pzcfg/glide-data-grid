{"version":3,"file":"258.6b309f03.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAAA;ACEA;AAAA;AAAA;AAAA;ADAA;;AAcA;AAhBA;;AAiBA;AACA;AAIA;AAAA;;AAGA;AACA;AAAA;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAlCA;;AAmCA;AACA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAfA;AAeA;;AAMA","sources":["webpack://root/../../src/data-grid-overlay-editor/private/home/runner/work/glide-data-grid/glide-data-grid/packages/core/src/data-grid-overlay-editor/private/number-overlay-editor.tsx","webpack://root/../../src/data-grid-overlay-editor/private/home/runner/work/glide-data-grid/glide-data-grid/packages/core/src/data-grid-overlay-editor/private/number-overlay-editor-style.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { NumberOverlayEditorStyle } from \"./number-overlay-editor-style\";\nimport { NumericFormat } from \"react-number-format\";\nimport type { SelectionRange } from \"../../data-grid/data-grid-types\";\nimport type { NumberFormatValues } from \"react-number-format/types/types\";\n\ninterface Props {\n    readonly value: number | undefined;\n    readonly disabled?: boolean;\n    readonly onChange: (values: NumberFormatValues) => void;\n    readonly highlight: boolean;\n    readonly validatedSelection?: SelectionRange;\n    readonly fixedDecimals?: number;\n    readonly allowNegative?: boolean;\n}\n\nfunction getDecimalSeparator() {\n    const numberWithDecimalSeparator = 1.1;\n    const result = Intl.NumberFormat()\n        ?.formatToParts(numberWithDecimalSeparator)\n        ?.find(part => part.type === \"decimal\")?.value;\n\n    return result ?? \".\";\n}\n\nfunction getThousandSeprator() {\n    return getDecimalSeparator() === \".\" ? \",\" : \".\";\n}\n\nconst NumberOverlayEditor: React.FunctionComponent<Props> = p => {\n    const { value, onChange, disabled, highlight, validatedSelection, fixedDecimals, allowNegative } = p;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    React.useLayoutEffect(() => {\n        if (validatedSelection !== undefined) {\n            const range = typeof validatedSelection === \"number\" ? [validatedSelection, null] : validatedSelection;\n            inputRef.current?.setSelectionRange(range[0], range[1]);\n        }\n    }, [validatedSelection]);\n\n    return (\n        <NumberOverlayEditorStyle>\n            <NumericFormat\n                autoFocus={true}\n                getInputRef={inputRef}\n                className=\"gdg-input\"\n                onFocus={(e: React.FocusEvent<HTMLInputElement>) =>\n                    e.target.setSelectionRange(highlight ? 0 : e.target.value.length, e.target.value.length)\n                }\n                disabled={disabled === true}\n                decimalScale={fixedDecimals}\n                allowNegative={allowNegative}\n                thousandSeparator={getThousandSeprator()}\n                decimalSeparator={getDecimalSeparator()}\n                value={Object.is(value, -0) ? \"-\" : value ?? \"\"}\n                // decimalScale={3}\n                // prefix={\"$\"}\n                onValueChange={onChange}\n            />\n        </NumberOverlayEditorStyle>\n    );\n};\n\nexport default NumberOverlayEditor;\n","import { styled } from \"@linaria/react\";\n\nexport const NumberOverlayEditorStyle = styled.div`\n    display: flex;\n    margin: 6px 0 3px;\n    color: var(--gdg-text-dark);\n\n    > input {\n        font-size: var(--gdg-editor-font-size);\n        padding: 0;\n        font-family: var(--gdg-font-family);\n        color: var(--gdg-text-dark);\n        background-color: var(--gdg-bg-cell);\n    }\n`;\n"],"names":[],"sourceRoot":""}